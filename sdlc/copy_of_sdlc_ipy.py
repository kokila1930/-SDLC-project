# -*- coding: utf-8 -*-
"""Copy of SDLC.ipy

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KztEzDDHggr5hn1dg6AQaCYYYl_1_7Rn
"""

!pip install gradio torch transformers

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Define the model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=512):
    """Generates a text response from the model."""
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def concept_explanation(concept):
    """Explains a concept in detail."""
    prompt = f"explain the concept of {concept} in detail with example"
    return generate_response(prompt, max_length=800)

def quiz_generator(concept):
    """Generates a quiz for a given concept."""
    prompt = f"generate 5 quiz questions about {concept} with different question types (multiple choice, true/false, short answer). Give me the answers at the end."
    return generate_response(prompt, max_length=1200)

# Create the Gradio interface
with gr.Blocks() as app:
    gr.Markdown("# Educational AI Assistant")
    with gr.Tabs():
        with gr.Tab(label="Concept Explanation"):
            concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., Machine Learning")
            explain_btn = gr.Button("Explain")
            explanation_output = gr.Textbox(label="Explanation", lines=10)

            # Use the corrected variable name `concept_input`
            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

        with gr.Tab(label="Quiz Generator"):
            quiz_input = gr.Textbox(label="Enter a concept", placeholder="e.g., Machine Learning")
            quiz_btn = gr.Button("Generate Quiz")
            quiz_output = gr.Textbox(label="Quiz Questions & Answers", lines=15)

            # Use the corrected variable name `quiz_input`
            quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)

app.launch(share=True)